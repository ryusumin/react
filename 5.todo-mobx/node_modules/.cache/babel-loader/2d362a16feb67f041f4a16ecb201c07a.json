{"ast":null,"code":"import _initializerDefineProperty from \"C:/Users/sumin/Desktop/sumin/workspace/5.todo-mobx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"C:/Users/sumin/Desktop/sumin/workspace/5.todo-mobx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"C:/Users/sumin/Desktop/sumin/workspace/5.todo-mobx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _temp;\n\nimport { observable, action, computed, makeObservable, toJS } from 'mobx';\nlet TodoStore = (_class = (_temp = class TodoStore {\n  //   mobX6 부터 makeObservable 함수를 통해 생성자에서 makeObservable를 지정해줘야 데이터 변경이 반영된다.\n  constructor() {\n    _initializerDefineProperty(this, \"_todo\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"_todos\", _descriptor2, this);\n\n    makeObservable(this);\n  }\n\n  // get 메서드, 데이터만 만들어 놓고 return (다른 곳에 내보내기 위해서) \n  get todo() {\n    return this._todo;\n  } //   observervable로 관리하는 데이터들은, mobx가 정의한 observervable데이터로 랩핑이된다.\n  //   computed 를 사용하게 되면, tods가 호출될때마다 toJS를 계속해서 호출될텐데, computed를사용시에, observervable데이터가 변경이 일어나지 않으면 최종으로 캐싱하고 있는 데이터를 리턴한다.\n  //   get메소드에서 observervable데이터에 대한 특정연산이 진행될때는 꼭 computed사용해야한다.\n\n\n  get todos() {\n    // return this._todos; // 잘 들어감 아래에\n    // return this._todos ? this._todos.slice() : [];\n    return toJS(this._todos);\n  } // todo  설정\n\n\n  setTodoProps(name, value) {\n    this._todo = { ...this._todo,\n      [name]: value\n    };\n  }\n\n  addTodo(todo) {\n    this._todos.push(todo);\n  } // 내용 클릭 시 title, Date에 나타남\n\n\n  seletedTodo(todo) {\n    this._todo = todo;\n  }\n\n  updateTodo() {\n    // 변경해야할 것 찾아야함\n    let foundTodo = this._todos.find(todo => todo.id === this._todo.id);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"_todo\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {};\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"_todos\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"todos\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"todos\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setTodoProps\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setTodoProps\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"addTodo\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"addTodo\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"seletedTodo\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"seletedTodo\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"updateTodo\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"updateTodo\"), _class.prototype)), _class);\nexport default new TodoStore();","map":{"version":3,"sources":["C:/Users/sumin/Desktop/sumin/workspace/5.todo-mobx/src/stores/TodoStore.js"],"names":["observable","action","computed","makeObservable","toJS","TodoStore","constructor","todo","_todo","todos","_todos","setTodoProps","name","value","addTodo","push","seletedTodo","updateTodo","foundTodo","find","id"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,QAA7B,EAAuCC,cAAvC,EAAuDC,IAAvD,QAAmE,MAAnE;IAEMC,S,sBAAN,MAAMA,SAAN,CAAgB;AAEZ;AACAC,EAAAA,WAAW,GAAG;AAAA;;AAAA;;AACVH,IAAAA,cAAc,CAAC,IAAD,CAAd;AACH;;AASD;AACA,MAAII,IAAJ,GAAW;AACP,WAAO,KAAKC,KAAZ;AACH,GAjBW,CAmBZ;AACA;AACA;;;AACA,MACIC,KADJ,GACY;AACR;AACA;AACA,WAAOL,IAAI,CAAC,KAAKM,MAAN,CAAX;AACH,GA3BW,CA6BZ;;;AAEAC,EAAAA,YADA,CACaC,IADb,EACmBC,KADnB,EAC0B;AACtB,SAAKL,KAAL,GAAa,EACT,GAAG,KAAKA,KADC;AAET,OAACI,IAAD,GAAQC;AAFC,KAAb;AAIH;;AAGDC,EAAAA,OADA,CACQP,IADR,EACc;AACV,SAAKG,MAAL,CAAYK,IAAZ,CAAiBR,IAAjB;AACH,GAzCW,CA2CZ;;;AAEAS,EAAAA,WADA,CACYT,IADZ,EACkB;AACd,SAAKC,KAAL,GAAaD,IAAb;AACH;;AAGDU,EAAAA,UADA,GACa;AACT;AACA,QAAIC,SAAS,GAAG,KAAKR,MAAL,CAAYS,IAAZ,CAAkBZ,IAAD,IAAUA,IAAI,CAACa,EAAL,KAAY,KAAKZ,KAAL,CAAWY,EAAlD,CAAhB;AACH;;AArDW,C,+EAOXpB,U;;;;;WACO,E;;0EAGPA,U;;;;;WACQ,E;;0DAURE,Q,+IAQAD,M,iJAQAA,M,gJAMAA,M,mJAKAA,M;AAML,eAAe,IAAII,SAAJ,EAAf","sourcesContent":["import { observable, action, computed, makeObservable, toJS } from 'mobx';\r\n\r\nclass TodoStore {\r\n\r\n    //   mobX6 부터 makeObservable 함수를 통해 생성자에서 makeObservable를 지정해줘야 데이터 변경이 반영된다.\r\n    constructor() {\r\n        makeObservable(this);\r\n    }\r\n\r\n    @observable\r\n    _todo = {} // private로 생각  id, title, data\r\n\r\n    // todo 데이터들을 담을 todos 배열객체 \r\n    @observable\r\n    _todos = [];\r\n\r\n    // get 메서드, 데이터만 만들어 놓고 return (다른 곳에 내보내기 위해서) \r\n    get todo() {\r\n        return this._todo;\r\n    }\r\n\r\n    //   observervable로 관리하는 데이터들은, mobx가 정의한 observervable데이터로 랩핑이된다.\r\n    //   computed 를 사용하게 되면, tods가 호출될때마다 toJS를 계속해서 호출될텐데, computed를사용시에, observervable데이터가 변경이 일어나지 않으면 최종으로 캐싱하고 있는 데이터를 리턴한다.\r\n    //   get메소드에서 observervable데이터에 대한 특정연산이 진행될때는 꼭 computed사용해야한다.\r\n    @computed\r\n    get todos() {\r\n        // return this._todos; // 잘 들어감 아래에\r\n        // return this._todos ? this._todos.slice() : [];\r\n        return toJS(this._todos);\r\n    }\r\n\r\n    // todo  설정\r\n    @action\r\n    setTodoProps(name, value) {\r\n        this._todo = {\r\n            ...this._todo,\r\n            [name]: value,\r\n        };\r\n    }\r\n\r\n    @action\r\n    addTodo(todo) {\r\n        this._todos.push(todo);\r\n    }\r\n\r\n    // 내용 클릭 시 title, Date에 나타남\r\n    @action\r\n    seletedTodo(todo) {\r\n        this._todo = todo;\r\n    }\r\n\r\n    @action\r\n    updateTodo() {\r\n        // 변경해야할 것 찾아야함\r\n        let foundTodo = this._todos.find((todo) => todo.id === this._todo.id) \r\n    }\r\n}\r\nexport default new TodoStore();"]},"metadata":{},"sourceType":"module"}