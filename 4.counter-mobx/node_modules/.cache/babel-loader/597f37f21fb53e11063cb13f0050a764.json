{"ast":null,"code":"import _initializerDefineProperty from \"C:/Users/sumin/Desktop/sumin/workspace/4.counter-mobx/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js\";\nimport _applyDecoratedDescriptor from \"C:/Users/sumin/Desktop/sumin/workspace/4.counter-mobx/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\";\nimport _initializerWarningHelper from \"C:/Users/sumin/Desktop/sumin/workspace/4.counter-mobx/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper.js\";\n\nvar _class, _descriptor;\n\nimport { observable, action, makeAutoObservable } from 'mobx';\nlet CounterStore = (_class = class CounterStore {\n  constructor() {\n    _initializerDefineProperty(this, \"_count\", _descriptor, this);\n\n    makeAutoObservable(this);\n  }\n\n  // get 메서드는 사용하는 쪽에서 마치 property처럼 사용할 수 있음\n  get count() {\n    return this._count;\n  }\n\n  increment() {\n    this._count++;\n    console.log(\"increment : \" + this._count);\n  }\n\n  decrement() {\n    this._count--;\n    console.log(\"decrement : \" + this._count);\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"_count\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 5;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"increment\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"increment\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"decrement\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"decrement\"), _class.prototype)), _class); // export default CounterStore; 사용하는 곳에서 new 해서 사용해야 함\n\nexport default new CounterStore();","map":{"version":3,"names":["observable","action","makeAutoObservable","CounterStore","constructor","count","_count","increment","console","log","decrement"],"sources":["C:/Users/sumin/Desktop/sumin/workspace/4.counter-mobx/src/store/CounterStore.js"],"sourcesContent":["import { observable,  action, makeAutoObservable } from 'mobx';\r\n\r\nclass CounterStore {\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    @observable\r\n    _count = 5;\r\n\r\n\r\n    // get 메서드는 사용하는 쪽에서 마치 property처럼 사용할 수 있음\r\n    get count() {\r\n        return this._count;\r\n    }\r\n\r\n    @action\r\n    increment() {\r\n        this._count ++;\r\n        console.log(\"increment : \" + this._count);\r\n    }\r\n\r\n    @action\r\n    decrement() {\r\n        this._count --;\r\n        console.log(\"decrement : \" + this._count);\r\n    }\r\n\r\n}\r\n// export default CounterStore; 사용하는 곳에서 new 해서 사용해야 함\r\nexport default new CounterStore;"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAsBC,MAAtB,EAA8BC,kBAA9B,QAAwD,MAAxD;IAEMC,Y,aAAN,MAAMA,YAAN,CAAmB;EAEfC,WAAW,GAAG;IAAA;;IACVF,kBAAkB,CAAC,IAAD,CAAlB;EACH;;EAMD;EACS,IAALG,KAAK,GAAG;IACR,OAAO,KAAKC,MAAZ;EACH;;EAGDC,SAAS,GAAG;IACR,KAAKD,MAAL;IACAE,OAAO,CAACC,GAAR,CAAY,iBAAiB,KAAKH,MAAlC;EACH;;EAGDI,SAAS,GAAG;IACR,KAAKJ,MAAL;IACAE,OAAO,CAACC,GAAR,CAAY,iBAAiB,KAAKH,MAAlC;EACH;;AAzBc,C,wEAMdN,U;;;;;WACQ,C;;8DAQRC,M,gJAMAA,M,gGAOL;;AACA,eAAe,IAAIE,YAAJ,EAAf"},"metadata":{},"sourceType":"module"}